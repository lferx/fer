<apex:page standardController="Shell_pueba__c" extensions="ShellController" showHeader="false">
    <style type="text/css">
    .foto-container {
        width: 100%;
        height: 100%;
        float: left;
        display: inline-block;
        position: relative;
    }
    .btn {
        position: absolute;
        bottom: 0;
        left: 0;
        float: left;
        display: inline-block;
    }
    
       /* Tiny Carousel */
            .suggestion {
                cursor: pointer;
            }
            .slider-wrapper {
                padding: 0 15px;
                
            }
            
            #slider1 {
                height: 1%;
                margin: 30px 0 0;
                overflow: hidden;
                position: relative;
                
                padding: 10px 50px 10px;
            }




            #slider1 .viewport {
                height: 240px;
                
                overflow: auto;
                position: relative;
            }

            #slider1 .buttons {
                background: #1C79A7;
                border-radius: 35px;
                display: block;
                position: absolute;
                top: 50%;
                left: 0;
                width: 35px;
                height: 35px;
                color: #fff;
                font-weight: bold;
                text-align: center;
                line-height: 35px;
                text-decoration: none;
                font-size: 22px;
            }

            #slider1 .next {
                right: 0;
                left: auto;
                top: 50%;
            }
            

            #slider1 .buttons:hover {
                color: #1C79A7;
                background: #fff;
                border: 1px solid #1C79A7;
            }

            #slider1 .disable {
                visibility: hidden;
            }

            #slider1 .overview {
                list-style: none;
                position: absolute;
                padding: 5px;
                margin: 0;
                width: 80px;
                left: 0;
                top: 0;
                height: 225px;
                overflow: auto;
            }
            
            #slider1 .overview li {
                float: left;
                margin: 0 20px 0 0;
                padding: 10px;
                height: 205px;
                width: 230px;
                border: 1px solid #dcdcdc;
                background-color: #fff;
             }
             #slider1 .overview li:hover {
                -webkit-box-shadow: 0px 0px 8px 0px rgba(0, 0, 0, 0.75);
                -moz-box-shadow:    0px 0px 8px 0px rgba(0, 0, 0, 0.75);
                box-shadow:         0px 0px 8px 0px rgba(0, 0, 0, 0.75);
             }
    </style>
   
    
    <section id="home-intro">
         <center>
            <div class="slider-wrapper">
                 <div id="slider1">
                    <a class="buttons prev" href="#">&#60;</a>
                   <div class="viewport">
                   <div class="content">
        <div class="container">
            <div class="row">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        
                    </div>
                          <apex:dataList rendered="{!fotos.size>0}" value="{!fotos}" var="foto" id="theList" styleClass="overview">  
                            
                             <div class="foto-container">
                                    <apex:image width="100%" value="/servlet/servlet.FileDownload?file={!foto.Id}"></apex:image>
                                    <apex:outputLink target="_parent" styleClass="btn" value="/{!foto.Id}">
                                        Ir al registro
                                    </apex:outputlink> 
                                </div>
                            </apex:dataList>
                            <apex:outputText rendered="{!NOT(fotos.size>0)}" value="Sin fotos" />
                        
                    </div>
                     </div>
            </div>
        </div>
    </div>
                    <a class="buttons next" href="#">&#62;</a>
                </div>
            </div>
            </center>
            
        </section>
    
    
     <script src="{!URLFOR($Resource.HomeRevimex,'js/vendor/jquery-1.10.2.min.js')}"></script>
        <script src="{!URLFOR($Resource.HomeRevimex,'js/vendor/jquery.placeholder.js')}"></script>
        <script src="{!URLFOR($Resource.HomeRevimex,'js/vendor/fancybox/jquery.fancybox.js')}"></script>
        <script src="{!URLFOR($Resource.HomeRevimex,'js/main.js')}"></script>
        
       
          <script>
              var parametros =  {
                    'estado':String('Todos'),
                    'ciudad':String('Todos'),
                    'tipo':String('Todos')
                };
                ;(function(factory) {
                    if(typeof define === 'function' && define.amd) {
                        define(['jquery'], factory);
                    }
                    else if(typeof exports === 'object') {
                        module.exports = factory(require('jquery'));
                    }
                    else {
                        factory(jQuery);
                    }
                }
                (function($) {
                    var pluginName = "tinycarousel"
                    ,   defaults   =
                        {
                            start: 0
                        ,   axis: "x"
                        ,   buttons: true
                        ,   bullets: false
                        ,   interval: false
                        ,   intervalTime: 3000
                        ,   animation: true
                        ,   animationTime: 1000
                        ,   infinite: true
                        }
                    ;

                    function Plugin($container, options) {
                        
                        this.options = $.extend({}, defaults, options);

                        
                        this._defaults = defaults;

                        
                        this._name = pluginName;

                        var self = this
                        ,   $viewport = $container.find(".viewport:first")
                        ,   $overview = $container.find(".overview:first")
                        ,   $slides = null
                        ,   $next = $container.find(".next:first")
                        ,   $prev = $container.find(".prev:first")
                        ,   $bullets = $container.find(".bullet")

                        ,   viewportSize = 0
                        ,   contentStyle = {}
                        ,   slidesVisible = 0
                        ,   slideSize = 0
                        ,   slideIndex = 0

                        ,   isHorizontal = this.options.axis === 'x'
                        ,   sizeLabel = isHorizontal ? "Width" : "Height"
                        ,   posiLabel = isHorizontal ? "left" : "top"
                        ,   intervalTimer = null
                        ;

                       
                        this.slideCurrent = 0;

                       
                        this.slidesTotal = 0;

                        
                        this.intervalActive = false;

                        
                        function _initialize() {
                            self.update();
                            self.move(self.slideCurrent);

                            _setEvents();

                            return self;
                        }

                        /**
                         * You can use this method to add new slides on the fly. Or to let the carousel recalculate itself.
                         *
                         * @method update
                         * @chainable
                         */
                        this.update = function() {
                            $overview.find(".mirrored").remove();

                            $slides = $overview.children();
                            viewportSize = $viewport[0]["offset" + sizeLabel];
                            slideSize = $slides.first()["outer" + sizeLabel](true);
                            self.slidesTotal = $slides.length;
                            self.slideCurrent = self.options.start || 0;
                            slidesVisible = Math.ceil(viewportSize / slideSize);

                            $overview.append($slides.slice(0, slidesVisible).clone().addClass("mirrored"));
                            $overview.css(sizeLabel.toLowerCase(), slideSize * (self.slidesTotal + slidesVisible));

                            _setButtons();

                            return self;
                        };

                        /**
                         * @method _setEvents
                         * @private
                         */
                        function _setEvents() {
                            if(self.options.buttons) {
                                $prev.click(function() {
                                    self.move(--slideIndex);

                                    return false;
                                });

                                $next.click(function() {
                                    self.move(++slideIndex);

                                    return false;
                                });
                            }

                            $(window).resize(self.update);

                            if(self.options.bullets) {
                                $container.on("click", ".bullet", function() {
                                    self.move(slideIndex = +$(this).attr("data-slide"));

                                    return false;
                                });
                            }
                        
                           

                            $(window).resize(self.update);

                            if(self.options.bullets) {
                                $container.on("click", ".bullet", function() {
                                    self.move(slideIndex = +$(this).attr("data-slide"));

                                    return false;
                                });
                            }
                        }


                        /**
                         * If the interval is stoped start it.
                         *
                         * @method start
                         * @chainable
                         */
                        this.start = function() {
                            if(self.options.interval) {
                                clearTimeout(intervalTimer);

                                self.intervalActive = true;

                                intervalTimer = setTimeout(function() {
                                    self.move(++slideIndex);

                                }, self.options.intervalTime);
                            }

                            return self;
                        };

                        /**
                         * If the interval is running stop it.
                         *
                         * @method start
                         * @chainable
                         */
                        this.stop = function() {
                            clearTimeout(intervalTimer);

                            self.intervalActive = false;

                            return self;
                        };

                        /**
                         * Move to a specific slide.
                         *
                         * @method move
                         * @chainable
                         * @param {Number}  [index] The slide to move to.
                         */
                        this.move = function(index) {
                            slideIndex = isNaN(index) ? self.slideCurrent : index;
                            self.slideCurrent = slideIndex % self.slidesTotal;

                            if(slideIndex < 0) {
                                self.slideCurrent = slideIndex = self.slidesTotal - 1;
                                $overview.css(posiLabel, -(self.slidesTotal) * slideSize);
                            }

                            if(slideIndex > self.slidesTotal) {
                                self.slideCurrent = slideIndex = 1;
                                $overview.css(posiLabel, 0);
                            }
                            contentStyle[posiLabel] = -slideIndex * slideSize;

                            $overview.animate(
                                contentStyle
                            ,   {
                                    queue : false
                                ,   duration : self.options.animation ? self.options.animationTime : 0
                                ,   always : function() {
                                       /**
                                        * The move event will trigger when the carousel slides to a new slide.
                                        *
                                        * @event move
                                        */
                                        $container.trigger("move", [$slides[self.slideCurrent], self.slideCurrent]);
                                    }
                                });

                            _setButtons();
                            self.start();

                            return self;
                        };

                        /**
                         * @method _setButtons
                         * @private
                         */
               
                        function _setButtons() {
                            if(self.options.buttons && !self.options.infinite) {
                                $prev.toggleClass("disable", self.slideCurrent <= 0);
                                $next.toggleClass("disable", self.slideCurrent >= self.slidesTotal - slidesVisible);
                            }

                            if(self.options.bullets) {
                                $bullets.removeClass("active");
                                $($bullets[self.slideCurrent]).addClass("active");
                            }
                        }
                        function  validacomas(){
                          a("entron");
                         var cadenaBase=this.value;
                         var largoCadena= cadenaBase.length;
                         var puntoPosicion= cadenaBase.lastIndexOf('.');
                         var decenas="";
                         var centenas="";
                         var millares="";
                         if(puntoPosicion == 6){
                                decenas=cadenaBase.substring(0, 2);
                                centenas=cadenaBase.substring(3, 5);
                             }
                         else if(puntoPosicion == 7){
                                decenas=cadenaBase.substring(1, 3);
                                centenas=cadenaBase.substring(4, 6);
                                millares=cadenaBase.charAt(0);
                             }
                         else if(puntoPosicion == 8){
                                decenas=cadenaBase.substring(2, 4);
                                centenas=cadenaBase.substring(5, 7);
                                millares=cadenaBase.substring(0,1);
                             }
                         else{
                                decenas=cadenaBase.substring(3, 5);
                                centenas=cadenaBase.substring(6, 8);
                                millares=cadenaBase.substring(0,2);
                             }   
                             var regreso = millares+','+decenas+','+centenas; 
                             this.value= regreso
                         }

                        return _initialize();
                    }
                    
               
                    /**
                    * @class tinycarousel
                    * @constructor
                    * @param {Object} options
                        @param {Number}  [options.start=0] The slide to start with.
                        @param {String}  [options.axis=x] Vertical or horizontal scroller? ( x || y ).
                        @param {Boolean} [options.buttons=true] Show previous and next navigation buttons.
                        @param {Boolean} [options.bullets=false] Is there a page number navigation present?
                        @param {Boolean} [options.interval=false] Move to another block on intervals.
                        @param {Number}  [options.intervalTime=3000] Interval time in milliseconds.
                        @param {Boolean} [options.animate=true] False is instant, true is animate.
                        @param {Number}  [options.animationTime=1000] How fast must the animation move in ms?
                        @param {Boolean} [options.infinite=true] Infinite carousel.
                    */
                    $.fn[pluginName] = function(options) {
                        return this.each(function() {
                            if(!$.data(this, "plugin_" + pluginName)) {
                                $.data(this, "plugin_" + pluginName, new Plugin($(this), options));
                            }
                        });
                    };
                }));
            $(function(){
                $('#slider1').tinycarousel();
                $( ".suggestion" ).click(function() {
                    var id =  $(this).attr('id');
                    var url = document.URL.split('?');
                    var retUrl = url.length > 1 ? url[1] : ''; 
                    //console.log(url.length);
                    var url = '©=' + id +'&' +  retUrl;
                    window.location.replace(url);
                });
                $( ".validacomas" ).each(function( index ) {
                  var text = $( this ).text().replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
                  $( this ).text(text);
                });
            });
        
                            
        
       </script>
</apex:page>